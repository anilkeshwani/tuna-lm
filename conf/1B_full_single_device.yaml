# Config for single device full finetuning in full_finetune_single_device.py using a Llama3.2 1B (Instruct) model.
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.2-1B --output-dir /tmp/Llama-3.2-1B --ignore-patterns "original/consolidated.00.pth"
#
# The default config uses an optimizer from bitsandbytes. Install it with: `pip install bitsandbytes`
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config llama3_2/1B_full_single_device
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config llama3_2/1B_full_single_device checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /tmp/Llama-3.2-1B/original/tokenizer.model
  # set max_seq_len to 128000000 when packing; max seq. length per `llama model describe -m Llama3.2-1B`
  max_seq_len: null

# Dataset
dataset:
  _component_: torchtune.datasets.text_completion_dataset
  source: anilkeshwani/MLS_english_train_strat_sample_aligned_hubert_interleaved
  column: text
  split: train
  add_eos: True
  packed: False # packing performed a priori at training time and leads to CPU RAM overflow for e.g. MLS interleaved
  # split_across_pack: True # set to True for CPT; set to False for SFT

  # tokenizer: # set above

  # NOTE Following arguments copied across from text_completion_dataset docstring for reference
  # filter_fn: Optional[Callable] = None
  # **load_dataset_kwargs: Dict[str, Any]
seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.llama3_2_1b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Llama-3.2-1B/
  checkpoint_files: [model.safetensors]
  recipe_checkpoint: null
  output_dir: /tmp/Llama-3.2-1B/
  model_type: LLAMA3_2
resume_from_checkpoint: False

# Continued Pre-training / Fine-tuning arguments
epochs: 5
batch_size: 4
gradient_accumulation_steps: 1
max_steps_per_epoch: null
optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-5
  fused: True

lr_scheduler:
  _component_: torchtune.modules.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 0 # The number of steps for the warmup phase.
  num_cycles: 0.5 # The number of waves in the cosine schedule. Defaults to 0.5. (decrease from the max value to 0 following a half-cosine).
  last_epoch: -1 # The index of the last epoch when resuming training. Defaults to -1. Set to self.global_step - 1 in recipe.
  # optimizer: # set dynamically in recipe
  # num_training_steps: # set to total_epochs * _steps_per_epoch (:= len(self._dataloader) // self._gradient_accumulation_steps)

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
clip_grad_norm: null

# Fusing optimizer step into backward pass;
# see https://pytorch.org/tutorials/intermediate/optimizer_step_in_backward_tutorial.html
optimizer_in_bwd: False
compile: False # set it to True for better memory and performance

# Training environment
device: cuda

# Memory management
enable_activation_checkpointing: False

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  log_dir: ${output_dir}
  project: speech-integration
  entity: null # automatically set to username based on API key
  group: null
output_dir: /tmp/full-llama3.2-finetune
log_every_n_steps: 1
log_peak_memory_stats: False

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: True
  with_stack: False
  record_shapes: True
  with_flops: True

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 1
  warmup_steps: 2
  active_steps: 1
  num_cycles: 1
